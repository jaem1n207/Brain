{
  "main": {
    "id": "64787564aa8b948e",
    "type": "split",
    "children": [
      {
        "id": "38fd897d2ee1ec7b",
        "type": "tabs",
        "children": [
          {
            "id": "4a3c90b34e7e3b57",
            "type": "leaf",
            "state": {
              "type": "markdown",
              "state": {
                "file": "코딩/patterns/design-patterns/observer-pattern.md",
                "mode": "source",
                "source": false
              }
            }
          }
        ]
      },
      {
        "id": "2dcf4c7aae647e37",
        "type": "tabs",
        "children": [
          {
            "id": "51367c74a9a5172e",
            "type": "leaf",
            "state": {
              "type": "markdown",
              "state": {
                "file": "코딩/patterns/design-patterns/singleton.md",
                "mode": "source",
                "source": false
              }
            }
          }
        ]
      }
    ],
    "direction": "vertical"
  },
  "left": {
    "id": "510c66cc2b0dba9c",
    "type": "split",
    "children": [
      {
        "id": "43c2c8d354fee369",
        "type": "tabs",
        "children": [
          {
            "id": "3f5c63b7d9de1aa3",
            "type": "leaf",
            "state": {
              "type": "file-explorer",
              "state": {
                "sortOrder": "alphabetical"
              }
            }
          },
          {
            "id": "54c1e6b7c101d237",
            "type": "leaf",
            "state": {
              "type": "search",
              "state": {
                "query": "\"class ApiFacade {\tprivate baseUrl: string;\t\t\t// 생성자에서 `baseUrl`프로퍼티가 전달되는 ApiFacade 클래스를 생성합니다.\t\tconstructor(baseUrl: string) {\t\tthis.baseUrl = baseUrl;\t\t}\t\t\t// API에서 데이터를 보내는 메서드를 정의합니다.\t\tasync post(path: string, data: any) {\t\tconst response = await fetch(`${this.baseUrl}${path}`, {\t\tmethod: 'POST',\t\theaders: {\t\t'Content-Type': 'application/json',\t\t},\t\tbody: JSON.stringify(data),\t\t});\t\t  \t\treturn response.json();\t\t}\t\t  \t// API에서 데이터를 가져오는 메서드를 정의합니다.\t\tasync get(path: string) {\t\tconst response = await fetch(`${this.baseUrl}${path}`, {\t\tmethod: 'GET',\t\t});\t\t  \treturn response.json();\t\t}\t\t}\t\t\t// 기본 URL을 설정합니다.\t\tconst api = new ApiFacade('https://jsonplaceholder.typicode.com');\t\t\t// 경로와 데이터를 호출해서 사용할 수 있습니다.\t\tconst users = await api.get('/users');\t\tconst createdUser = await api.post('/users', {\t\tname: 'John Doe',\t\tage: 30,});\"",
                "matchingCase": false,
                "explainSearch": false,
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical"
              }
            }
          },
          {
            "id": "5cb0a7f9b431538d",
            "type": "leaf",
            "state": {
              "type": "bookmarks",
              "state": {}
            }
          }
        ]
      },
      {
        "id": "e83e4af485ec51d3",
        "type": "tabs",
        "children": [
          {
            "id": "41978eed223a8cc0",
            "type": "leaf",
            "state": {
              "type": "recent-files",
              "state": {}
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 300
  },
  "right": {
    "id": "c709c1eee37397a8",
    "type": "split",
    "children": [
      {
        "id": "09bb3965e0a4ffd7",
        "type": "tabs",
        "children": [
          {
            "id": "55a6e4b6d06a24cb",
            "type": "leaf",
            "state": {
              "type": "backlink",
              "state": {
                "file": "코딩/patterns/design-patterns/singleton.md",
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical",
                "showSearch": false,
                "searchQuery": "",
                "backlinkCollapsed": false,
                "unlinkedCollapsed": true
              }
            }
          },
          {
            "id": "fb4b107295417ab4",
            "type": "leaf",
            "state": {
              "type": "outgoing-link",
              "state": {
                "file": "코딩/patterns/design-patterns/singleton.md",
                "linksCollapsed": false,
                "unlinkedCollapsed": true
              }
            }
          },
          {
            "id": "a95b53fb6cbba3fa",
            "type": "leaf",
            "state": {
              "type": "tag",
              "state": {
                "sortOrder": "frequency",
                "useHierarchy": true
              }
            }
          },
          {
            "id": "aba2cf2af95909ef",
            "type": "leaf",
            "state": {
              "type": "outline",
              "state": {
                "file": "코딩/patterns/design-patterns/singleton.md"
              }
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 300,
    "collapsed": true
  },
  "left-ribbon": {
    "hiddenItems": {
      "switcher:퀵 스위처 열기": false,
      "graph:그래프 뷰 열기": false,
      "canvas:새 캔버스 만들기": false,
      "daily-notes:오늘의 데일리 노트 열기": false,
      "templates:템플릿 삽입": false,
      "command-palette:명령어 팔레트 열기": false,
      "markdown-importer:마크다운 형식 가져오기 열기": false,
      "obsidian-excalidraw-plugin:Create new drawing": false,
      "table-editor-obsidian:Advanced Tables Toolbar": false
    }
  },
  "active": "51367c74a9a5172e",
  "lastOpenFiles": [
    "코딩/patterns/design-patterns/observer-pattern.md",
    "코딩/patterns/design-patterns/singleton.md",
    "코딩/cs/data-structure/graph.md",
    "코딩/cs/os/프로세스와 스레드의 차이.md",
    "코딩/cs/data-structure/tree.md",
    "코딩/cs/data-structure/array & linked-list.md",
    "코딩/cs/data-structure/stack & queue.md",
    "코딩/cs/data-structure/hash-table.md",
    "Excalidraw/cs/data-structure/tree/heapify-down.md",
    "Excalidraw/cs/data-structure/tree/heapify-up.md",
    "Excalidraw/cs/data-structure/tree/heapify-down.svg",
    "Excalidraw/cs/data-structure/tree/heapify-up.svg",
    "Excalidraw/cs/data-structure/tree/min-heap-delete-1.md",
    "code-playground/data-structures/tree/heapify.js",
    "Excalidraw/cs/data-structure/tree/min-heap-delete-bubble.md",
    "Excalidraw/cs/data-structure/tree/min-heap-delete-bubble.svg",
    "Excalidraw/cs/data-structure/tree/min-heap-delete.md",
    "Excalidraw/cs/data-structure/tree/min-heap-delete-1.svg",
    "Excalidraw/cs/data-structure/tree/Drawing 2023-09-24 18.29.45.excalidraw.svg",
    "Excalidraw/cs/data-structure/tree/무제 파일.md",
    "Excalidraw/cs/data-structure/tree/min-heap-delete.svg",
    "Excalidraw/cs/data-structure/tree/min-heap-insert-before.md",
    "Excalidraw/cs/data-structure/tree/min-heap-bubble-process.md",
    "Excalidraw/cs/data-structure/tree/Drawing 2023-09-24 18.26.06.excalidraw.svg",
    "Excalidraw/cs/data-structure/tree/Drawing 2023-09-24 18.10.25.excalidraw.svg",
    "Excalidraw/cs/data-structure/tree/min-heap-bubble-process.svg",
    "Excalidraw/cs/data-structure/tree/min-heap.md",
    "Excalidraw/cs/data-structure/tree/min-heap-insert-before.svg",
    "Excalidraw/cs/data-structure/tree/무제 파일.canvas",
    "Excalidraw/cs/data-structure/tree/traversing.md",
    "코딩/cs/data-structure/bindary-heap.md",
    "코딩/cs/data-structure/tree/complete-binary-tree.md",
    "코딩/cs/data-structure/tree/binary-tree.md",
    "코딩/cs/data-structure/tree/binary-search-tree.md",
    "code-playground/data-structures/tree/is-bst.mjs",
    "code-playground/data-structures/tree/binary-search-tree.mjs",
    "code-playground/data-structures/stack/stack.mjs",
    "code-playground/data-structures/stack/queue.mjs",
    "code-playground/data-structures/stack/is-balanced-tokens.mjs",
    "code-playground/data-structures/queue/queue.mjs",
    "code-playground/data-structures/queue/heap.mjs",
    "code-playground/data-structures/array/linked-list-based-array-list.mjs",
    "code-playground/data-structures/array/linked-list-based-array.mjs",
    "tree.light.svg.md",
    "Excalidraw/cs/data-structure/tree/unbalanced-tree.md",
    "Excalidraw/cs/data-structure/tree/tree.md",
    "무제 파일.canvas",
    "코딩/front-end/왜 webpack에서 vite로 전환하였는가?.md",
    "코딩/지식 캔버스.canvas",
    "코딩/이직 캔버스.canvas"
  ]
}